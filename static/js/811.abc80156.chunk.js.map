{"version":3,"file":"static/js/811.abc80156.chunk.js","mappings":"2MAgHA,UA3GsB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACjBC,GAASC,EAAAA,EAAAA,UACf,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KA4FA,OA1FAC,EAAAA,EAAAA,YAAU,WACR,GAAIF,EAAW,CACAH,EAAOM,QAAQC,IAAIC,WAAWC,OAIpCC,SAAQ,SAAAC,GAEI,WAAfA,EAAMC,MACW,gBAAjBD,EAAME,QACNF,EAAMG,QACNH,EAAMG,OAAO,eACkB,KAA/BH,EAAMG,OAAO,eAEbd,EAAOM,QAAQC,IAAIQ,kBAAkBJ,EAAMK,GAAI,aAAc,QAI7D,CAAC,iBAAkB,0BAA2B,gBAAgBC,SAC5DN,EAAM,kBAGRX,EAAOM,QAAQC,IAAIQ,kBAAkBJ,EAAMK,GAAI,aAAc,WAKjE,IAAIH,EAAS,IAAIK,EAAAA,OAAAA,WACjBlB,EAAOM,QAAQa,QAAQC,IAAIP,GAE3B,IAAMQ,EAAWtB,EAAOuB,KAAKf,KAAI,SAAAgB,GAC/B,OAAO,IAAIL,EAAAA,KAAAA,QAAmBA,EAAAA,KAAAA,qBAAgCK,OAG1DC,EAAc,IAAIN,EAAAA,KAAAA,kBAA6BG,GAC/CI,EAAaP,EAAAA,KAAAA,YAAAA,SAAgCM,GACnDX,EAAOO,IAAII,GAKX,IAAME,EAAaD,EAAWE,OAAM,SAAAC,GAAK,MACvC,CAAC,GAAI,IAAK,IAAK,IAAIX,SAASW,MAE1B,CAAEC,OAAQ,EAAE,EAAG,IACf,CAAEC,OAAQL,GAEdzB,EAAOM,QAAQyB,WAAf,kBACKL,GADL,IAEEM,QAAS,MAIXhC,EAAOM,QAAQG,OAAOW,IACpB,IAAIF,EAAAA,MAAAA,UAAsBL,EAAQ,cAAe,CAC/CoB,YAAa,UACbC,YAAa,IACbC,cAAe,KAEjB,aAGH,CAAChC,EAAWJ,KAEfM,EAAAA,EAAAA,YAAU,WACR,IAAM+B,EAAU,kBAAMhC,GAAa,IAEnC,IAAKJ,EAAOM,QAmBV,OAlBAN,EAAOM,QAAU,IAAIY,EAAAA,IAAU,aAAc,CAC3CmB,KAAM,OACNR,OAAQ,CAAC,IAAK,IACdS,KAAM,GACNC,SAAU,QACVC,kBAAkB,EAClBC,UAAU,EACVC,MAAO,kBACPC,mBAAmB,EACnBC,YAAa,CACXC,SAAU,kBACVC,gBAAiBC,iDAIrB/C,EAAOM,QAAQ0C,OAAO5B,IAAI,QAASgB,GAG5B,kBAAMpC,EAAOM,QAAQ0C,OAAOC,OAAO,QAASb,MAEpD,IAEErC,GAGH,4BACE,SAAC,IAAD,CAAcmD,MAAM,oBACpB,gBACElC,GAAG,aACH0B,MAAO,CAAES,MAAO,QAASC,OAAQ,QAASC,OAAQ,yBAPpC","sources":["components/stac/SpatialExtent.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport * as atlas from \"azure-maps-control\";\nimport \"azure-maps-control/dist/atlas.min.css\";\nimport LabeledValue from \"../controls/LabeledValue\";\n\nconst SpatialExtent = ({ extent }) => {\n  const mapRef = useRef();\n  const [mapLoaded, setMapLoaded] = useState(false);\n\n  useEffect(() => {\n    if (mapLoaded) {\n      var layers = mapRef.current.map.getStyle().layers;\n\n      // This will remove layer labels from the basemap, which tend to\n      // repeat in a overwhelming way at low zoom levels\n      layers.forEach(layer => {\n        if (\n          layer.type === \"symbol\" &&\n          layer.source === \"vectorTiles\" &&\n          layer.layout &&\n          layer.layout[\"text-field\"] &&\n          layer.layout[\"text-field\"] !== \"\"\n        ) {\n          mapRef.current.map.setLayoutProperty(layer.id, \"visibility\", \"none\");\n        }\n\n        if (\n          [\"Country border\", \"Disputed country border\", \"State border\"].includes(\n            layer[\"source-layer\"]\n          )\n        ) {\n          mapRef.current.map.setLayoutProperty(layer.id, \"visibility\", \"none\");\n        }\n      });\n\n      // Add all bounding boxes to the datasource\n      var source = new atlas.source.DataSource();\n      mapRef.current.sources.add(source);\n\n      const features = extent.bbox.map(bb => {\n        return new atlas.data.Feature(atlas.math.boundingBoxToPolygon(bb));\n      });\n\n      const fcollection = new atlas.data.FeatureCollection(features);\n      const extentBbox = atlas.data.BoundingBox.fromData(fcollection);\n      source.add(fcollection);\n\n      // Take a bounding box of the entire feature collection, which\n      // could have non-contiguous extents. At \"whole world\" extents,\n      // the map doesn't center correctly, so adjust to map-center manually\n      const centeredOn = extentBbox.every(coord =>\n        [0, -90, -180, 90].includes(coord)\n      )\n        ? { center: [-6, 3] }\n        : { bounds: extentBbox };\n\n      mapRef.current.setCamera({\n        ...centeredOn,\n        padding: 20,\n      });\n\n      // Add a line layer to render the outlines of the spatial extents\n      mapRef.current.layers.add(\n        new atlas.layer.LineLayer(source, \"myLineLayer\", {\n          strokeColor: \"#003F87\",\n          strokeWidth: 1.5,\n          strokeOpacity: 0.5,\n        }),\n        \"labels\"\n      );\n    }\n  }, [mapLoaded, extent]);\n\n  useEffect(() => {\n    const onReady = () => setMapLoaded(true);\n\n    if (!mapRef.current) {\n      mapRef.current = new atlas.Map(\"extent-map\", {\n        view: \"Auto\",\n        center: [90, -90],\n        zoom: 12,\n        language: \"en-US\",\n        showFeedbackLink: false,\n        showLogo: false,\n        style: \"grayscale_light\",\n        renderWorldCopies: true, // This setting may need adjustment for showing whole-world bounds\n        authOptions: {\n          authType: \"subscriptionKey\",\n          subscriptionKey: process.env.REACT_APP_AZMAPS_KEY,\n        },\n      });\n\n      mapRef.current.events.add(\"ready\", onReady);\n\n      // Remove event handlers on unmount\n      return () => mapRef.current.events.remove(\"ready\", onReady);\n    }\n  }, []);\n\n  if (!extent) return null;\n\n  return (\n    <div>\n      <LabeledValue label=\"Spatial Extent\" />\n      <div\n        id=\"extent-map\"\n        style={{ width: \"250px\", height: \"160px\", border: \"0.5px solid #ccc\" }}\n      ></div>\n    </div>\n  );\n};\n\nexport default SpatialExtent;\n"],"names":["extent","mapRef","useRef","useState","mapLoaded","setMapLoaded","useEffect","current","map","getStyle","layers","forEach","layer","type","source","layout","setLayoutProperty","id","includes","atlas","sources","add","features","bbox","bb","fcollection","extentBbox","centeredOn","every","coord","center","bounds","setCamera","padding","strokeColor","strokeWidth","strokeOpacity","onReady","view","zoom","language","showFeedbackLink","showLogo","style","renderWorldCopies","authOptions","authType","subscriptionKey","process","events","remove","label","width","height","border"],"sourceRoot":""}